name: Deploy Application

on:
  push:
    branches:
      - main
      - develop

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set deployment target
        id: set-target
        run: |
          if [ ${{ github.ref }} = 'refs/heads/main' ]; then
            echo "host=curate.fileopia.com" >> $GITHUB_OUTPUT
            echo "user=fileopia-curate" >> $GITHUB_OUTPUT
          else
            echo "host=curate-dev.fileopia.com" >> $GITHUB_OUTPUT
            echo "user=fileopia-curate-dev" >> $GITHUB_OUTPUT
          fi

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production
          MONGODB_URI: ${{ secrets.MONGODB_URI }}

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts

      - name: Deploy to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ steps.set-target.outputs.user }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "Starting deployment..."
            
            # Setup directories
            APP_DIR=~/htdocs/${{ steps.set-target.outputs.host }}
            BACKUP_DIR="${APP_DIR}_backup_$(date +%Y%m%d_%H%M%S)"
            
            # Backup existing deployment if it exists
            if [ -d "$APP_DIR" ]; then
              mv "$APP_DIR" "$BACKUP_DIR"
            fi
            
            # Create fresh directory
            mkdir -p "$APP_DIR"
            cd "$APP_DIR"
            
            # Setup environment
            echo "MONGODB_URI=${{ secrets.MONGODB_URI }}" > .env.local
            echo "NODE_ENV=production" >> .env.local
            
            # Clone repository
            git clone -b ${{ github.ref_name }} https://github.com/${{ github.repository }} .
            
            # Setup Node
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            
            # Install dependencies and build
            npm ci
            npm run build
            
            # Verify build
            if [ ! -d ".next" ]; then
              echo "Build verification failed"
              if [ -d "$BACKUP_DIR" ]; then
                echo "Restoring from backup..."
                rm -rf "$APP_DIR"
                mv "$BACKUP_DIR" "$APP_DIR"
              fi
              exit 1
            fi
            
            # Start application
            if pm2 list | grep -q "${{ steps.set-target.outputs.host }}"; then
              pm2 delete "${{ steps.set-target.outputs.host }}"
            fi
            
            PORT=3001 pm2 start npm --name "${{ steps.set-target.outputs.host }}" \
              --env production \
              -- start
            
            pm2 save
            
            # Cleanup old backup
            if [ -d "$BACKUP_DIR" ]; then
              rm -rf "$BACKUP_DIR"
            fi
            
            echo "Deployment complete"

      - name: Verify deployment
        run: |
          echo "Waiting for application to start..."
          sleep 30
          curl -f https://${{ steps.set-target.outputs.host }} || {
            echo "Deployment verification failed"
            exit 1
          }
              