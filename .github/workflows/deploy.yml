name: Deploy Application

on:
  push:
    branches:
      - main      # deploys to production
      - develop   # deploys to development

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set deployment target
        id: set-target
        run: |
          if [ ${{ github.ref }} = 'refs/heads/main' ]; then
            echo "host=curate.fileopia.com" >> $GITHUB_OUTPUT
            echo "user=fileopia-curate" >> $GITHUB_OUTPUT
          else
            echo "host=curate-dev.fileopia.com" >> $GITHUB_OUTPUT
            echo "user=fileopia-curate-dev" >> $GITHUB_OUTPUT
          fi

      - name: Notify deployment start
        if: github.event_name == 'pull_request' || github.event_name == 'issues'
        uses: actions/github-script@v7
        with:
          script: |
            const target = '${{ github.ref }}' === 'refs/heads/main' ? 'production' : 'development';
            const message = `üöÄ Deployment started to ${target}`;
            
            if (context.payload.pull_request) {
              await github.rest.issues.createComment({
                issue_number: context.payload.pull_request.number,
                owner: context.repo.owner,
                repo: context.repo.name,
                body: message
              });
            }

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts

      - name: Deploy to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ steps.set-target.outputs.user }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "Starting deployment..."
            
            mkdir -p ~/htdocs/${{ steps.set-target.outputs.host }}
            cd ~/htdocs/${{ steps.set-target.outputs.host }}
            
            # Set up environment before git operations
            echo "Setting up environment variables..."
            cp .env.production .env.local || true
            echo "MONGODB_URI=${{ secrets.MONGODB_URI }}" >> .env.local
            echo "NODE_ENV=production" >> .env.local
            
            echo "Cleaning repository state..."
            git fetch origin ${{ github.ref_name }}
            git reset --hard origin/${{ github.ref_name }}
            
            echo "Setting up Node environment..."
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            
            echo "Installing dependencies..."
            rm -rf node_modules .next
            npm ci
            
            echo "Building application..."
            NODE_ENV=production npm run build
            
            if [ ! -d ".next" ]; then
              echo "Build failed - .next directory not found"
              exit 1
            fi
            
            echo "Installing PM2 globally if not present..."
            npm list -g pm2 || npm install -g pm2
            
            echo "Starting/Restarting application..."
            if pm2 list | grep -q "${{ steps.set-target.outputs.host }}"; then
              echo "Stopping existing PM2 process..."
              pm2 stop ${{ steps.set-target.outputs.host }}
              pm2 delete ${{ steps.set-target.outputs.host }}
            fi
            
            echo "Starting new PM2 process..."
            PORT=3001 pm2 start npm --name "${{ steps.set-target.outputs.host }}" \
              --env production \
              --time \
              --max-memory-restart 500M \
              -- start
            
            # Save PM2 process list
            pm2 save
            
            # Show running processes and logs
            echo "PM2 process list:"
            pm2 list
            
            echo "Application logs:"
            pm2 logs ${{ steps.set-target.outputs.host }} --lines 50 --nostream
            
            echo "Deployment complete!"

      - name: Verify deployment
        run: |
          echo "Waiting for application to start..."
          sleep 60
          
          # Debug SSH connection
          echo "Testing SSH connection..."
          ssh -v -o StrictHostKeyChecking=no ${{ steps.set-target.outputs.user }}@${{ secrets.SERVER_IP }} "echo 'SSH connection successful'"
          
          # Try to access the site
          curl -v -f https://${{ steps.set-target.outputs.host }} || {
            echo "Deployment verification failed"
            echo "Checking PM2 logs..."
            ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ steps.set-target.outputs.user }}@${{ secrets.SERVER_IP }} "
              export NVM_DIR=\"\$HOME/.nvm\"
              [ -s \"\$NVM_DIR/nvm.sh\" ] && \. \"\$NVM_DIR/nvm.sh\"
              cd ~/htdocs/${{ steps.set-target.outputs.host }}
              npm list -g pm2 || npm install -g pm2
              pm2 logs ${{ steps.set-target.outputs.host }} --lines 100
            "
            exit 1
          }

      - name: Notify deployment complete
        if: success() && (github.event_name == 'pull_request' || github.event_name == 'issues')
        uses: actions/github-script@v7
        with:
          script: |
            const target = '${{ github.ref }}' === 'refs/heads/main' ? 'production' : 'development';
            const message = `‚úÖ Deployment completed successfully to ${target}`;
            
            if (context.payload.pull_request) {
              await github.rest.issues.createComment({
                issue_number: context.payload.pull_request.number,
                owner: context.repo.owner,
                repo: context.repo.name,
                body: message
              });
            }

      - name: Notify deployment failure
        if: failure() && (github.event_name == 'pull_request' || github.event_name == 'issues')
        uses: actions/github-script@v7
        with:
          script: |
            const target = '${{ github.ref }}' === 'refs/heads/main' ? 'production' : 'development';
            const message = `‚ùå Deployment failed to ${target}`;
            
            if (context.payload.pull_request) {
              await github.rest.issues.createComment({
                issue_number: context.payload.pull_request.number,
                owner: context.repo.owner,
                repo: context.repo.name,
                body: message
              });
            }
              