/* Hide ProseMirror's default drag decoration */
.ProseMirror-widget.ProseMirror-widget-decoration,
.ProseMirror-decoration {
  display: none !important;
  opacity: 0 !important;
  pointer-events: none !important;
}

.ProseMirror {
  padding: 1rem;
  border-radius: 0.5rem;
  border: 1px solid #e2e8f0;
  min-height: 150px;
  outline: none;
  margin-bottom: 4rem; /* Add margin to prevent overlap with sticky bar */
  position: relative;
  z-index: 1; /* Ensure editor is below sticky elements */
}

.ProseMirror > * + * {
  margin-top: 0.75em;
}

/* Basic list styles */
.ProseMirror ul,
.ProseMirror ol {
  padding-left: 1.5rem !important;
  margin: 0.5rem 0;
  list-style-position: outside !important;
}

.ProseMirror ul {
  list-style-type: disc !important;
}

.ProseMirror ol {
  list-style-type: decimal !important;
}

.ProseMirror li {
  position: relative;
  margin: 0.2rem 0;
  padding: 0.2rem 0;
  display: list-item !important;
  list-style-position: outside !important;
}

.ProseMirror li > p {
  margin: 0;
  min-height: 1.5em;
}

/* Task list styles */
.ProseMirror ul[data-type="taskList"] {
  list-style: none;
  padding: 0;
}

.ProseMirror ul[data-type="taskList"] p {
  margin: 0;
}

.ProseMirror ul[data-type="taskList"] li {
  display: flex;
  gap: 0.5rem;
  align-items: baseline;
  padding-left: 0.5rem;
}

.ProseMirror ul[data-type="taskList"] li > label {
  user-select: none;
  cursor: pointer;
  display: flex;
  align-items: center;
  gap: 0.5rem;
}

/* Custom checkbox styling */
.ProseMirror ul[data-type="taskList"] input[type="checkbox"] {
  -webkit-appearance: none;
  appearance: none;
  background-color: transparent;
  margin: 0;
  width: 16px;
  height: 16px;
  border: 1px solid #94a3b8;
  border-radius: 4px;
  cursor: pointer;
  display: grid;
  place-content: center;
}

.ProseMirror ul[data-type="taskList"] input[type="checkbox"]::before {
  content: "";
  width: 8px;
  height: 8px;
  transform: scale(0);
  transition: transform 0.1s ease-in-out;
  box-shadow: inset 1em 1em #3b82f6;
  transform-origin: center;
  clip-path: polygon(14% 44%, 0 65%, 50% 100%, 100% 16%, 80% 0%, 43% 62%);
}

.ProseMirror ul[data-type="taskList"] input[type="checkbox"]:checked::before {
  transform: scale(1);
}

.ProseMirror ul[data-type="taskList"] input[type="checkbox"]:focus {
  outline: 2px solid #3b82f6;
  outline-offset: 2px;
}

.ProseMirror ul[data-type="taskList"] li > div {
  flex: 1;
  margin-top: 0.125rem;
}

.ProseMirror ul[data-type="taskList"] li[data-checked="true"] > div {
  color: #94a3b8;
  text-decoration: line-through;
  text-decoration-thickness: 2px;
}

/* Placeholder styles */
.ProseMirror p.is-editor-empty:first-child::before {
  color: #adb5bd;
  content: attr(data-placeholder);
  float: left;
  height: 0;
  pointer-events: none;
}

/* Ensure list markers are visible */
.ProseMirror ul li::marker,
.ProseMirror ol li::marker {
  color: #64748b;
}

/* List item styles */
.ProseMirror .list-item {
  position: relative;
  margin: 0.2rem 0;
  padding: 0.5rem;
  padding-left: 2.5rem; /* Space for drag handle only */
  border-radius: 0.5rem;
  cursor: pointer;
  background-color: transparent;
  border: 2px solid transparent;
  transition: all 0.2s ease;
  min-height: 2.5rem;
  display: flex;
  align-items: center;
  gap: 0.5rem; /* Space between elements */
}

/* Hide tag button by default on all list items */
.ProseMirror .list-item .tag-button{
  display: none;
}

/* Only show tag button on child list items */
.ProseMirror .list-item .list-item .tag-button {
  display: inline-flex;
  position: relative;
  align-items: center;
  justify-content: center;
  flex: 0 0 auto;
  padding: 0.4rem;
  border-radius: 0.25rem;
  cursor: pointer;
  transition: all 0.2s ease;
  z-index: 10;
  pointer-events: auto !important;
  user-select: none;
  background-color: white;
  border: 1px dashed gray;
  color: #94a3b8;
  min-width: 32px;
  max-width: max-content;
  font-size: 0.875rem;
  white-space: nowrap;
  margin-right: 0.4rem;
}

/* Keep existing hover and active states for tag buttons */
.ProseMirror .list-item .list-item .tag-button:hover {
  background-color: #f1f5f9;
  border-color: #64748b;
  color: #64748b;
}

.ProseMirror .list-item .list-item .tag-button.has-tag {
  background-color: #e2e8f0;
  color: #475569;
  border-color: transparent;
  min-width: auto;
  padding: 0.2rem 0.2rem;
}

.ProseMirror .list-item .list-item .tag-button.has-tag:hover {
  background-color: #cbd5e1;
  border-color: #94a3b8;
}

/* Tag bubble menu styles */
.tag-bubble-menu {
  background-color: white;
  border-radius: 0.5rem;
  box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);
  padding: 0.5rem;
  z-index: 50;
  min-width: 150px;
  border: 1px solid #e2e8f0;
}

.tag-bubble-menu .tag-menu {
  display: flex;
  flex-direction: column;
  gap: 0.25rem;
}

.tag-bubble-menu .tag-menu-item {
  padding: 0.5rem 0.75rem;
  cursor: pointer;
  border-radius: 0.375rem;
  transition: all 0.2s ease;
  text-align: left;
  font-size: 0.875rem;
  color: #1f2937;
  background: transparent;
  border: none;
  width: 100%;
  display: flex;
  align-items: center;
}

.tag-bubble-menu .tag-menu-item:hover {
  background-color: #f3f4f6;
}

.tag-bubble-menu .tag-menu-item.active {
  background-color: #e2e8f0;
  color: #475569;
}

.tag-bubble-menu .tag-menu-item:focus {
  outline: 2px solid #3b82f6;
  outline-offset: -2px;
}

/* Drag handle */
.ProseMirror .list-item .drag-handle{
  position: absolute;
  left: 0.5rem;
  top: 0.5rem; /* Align to top with some padding */
  transform: none; /* Remove vertical centering transform */
  font-size: 1.2rem;
  line-height: 1;
  color: #64748b;
  opacity: 0;
  transition: opacity 0.2s ease, color 0.2s ease;
  cursor: move;
  touch-action: none;
  -webkit-user-select: none;
  user-select: none;
  padding: 0.25rem;
  z-index: 10;
}

/* Show drag handle for active and selected items */
.ProseMirror .list-item.is-active .drag-handle,
.ProseMirror .list-item.is-selected .drag-handle,
.ProseMirror .list-item:hover .drag-handle {
  opacity: 1;
}

.ProseMirror .list-item.is-active .drag-handle,
.ProseMirror .list-item.is-selected .drag-handle {
  color: rgb(59, 130, 246);
}

/* Active and selected states */
.ProseMirror .list-item.is-active,
.ProseMirror .list-item.is-selected {
  background-color: rgba(59, 130, 246, 0.1);
  border-color: rgb(59, 130, 246);
}

/* Ensure proper spacing for nested lists */
.ProseMirror li > ul,
.ProseMirror li > ol {
  margin: 0.2rem 0;
  padding-left: 1rem !important;
  width: 100%;
}

/* Adjust spacing for nested items */
.ProseMirror .list-item .list-item {
  margin-left: 0;
  padding-left: 2rem;
}

/* List item content */
.ProseMirror .list-item .list-item-content {
  flex: 1;
  min-width: 0;
  position: relative;
  z-index: 1;
  display: inline-flex;
  align-items: center;
}

/* Active state */
.ProseMirror .list-item.is-active {
  background-color: rgba(59, 130, 246, 0.1);
  border-color: rgb(59, 130, 246);
}

/* Selected state */
.ProseMirror .list-item.is-selected {
  background-color: rgba(59, 130, 246, 0.2);
  border-color: rgb(59, 130, 246);
}

/* Ensure nested list items don't inherit parent's active/selected state */
.ProseMirror .list-item.is-active > ul > li:not(.is-active),
.ProseMirror .list-item.is-active > ol > li:not(.is-active),
.ProseMirror .list-item.is-selected > ul > li:not(.is-selected),
.ProseMirror .list-item.is-selected > ol > li:not(.is-selected) {
  background-color: transparent;
  border-color: transparent;
}

/* Ensure nested list items can have their own active/selected state */
.ProseMirror .list-item > ul > li.is-active,
.ProseMirror .list-item > ol > li.is-active,
.ProseMirror .list-item > ul > li.is-selected,
.ProseMirror .list-item > ol > li.is-selected {
  background-color: rgba(59, 130, 246, 0.1);
  border-color: rgb(59, 130, 246);
}

/* Ensure proper spacing for nested lists */
.ProseMirror li > ul,
.ProseMirror li > ol {
  margin: 0.2rem 0;
  padding-left: 1rem !important;
}

/* Adjust spacing for nested items */
.ProseMirror .list-item .list-item {
  margin-left: 0;
  padding-left: 2rem;
}

/* Drag handle */
.ProseMirror .list-item .drag-handle {
  left: 0.5rem;
  top: 0.5rem;
}

/* Show drag handle for active and selected items */
.ProseMirror .list-item.is-active .drag-handle,
.ProseMirror .list-item.is-selected .drag-handle,
.ProseMirror .list-item:hover .drag-handle {
  opacity: 1;
}

.ProseMirror .list-item.is-active .drag-handle,
.ProseMirror .list-item.is-selected .drag-handle {
  color: rgb(59, 130, 246);
}

/* Dragging styles */
.ProseMirror .list-item.is-dragging {
  opacity: 0.5;
  background-color: rgba(59, 130, 246, 0.1);
  cursor: move;
}

/* Ensure tag button remains visible during dragging */
.ProseMirror .list-item.is-dragging .tag-button {
  opacity: 1 !important;
  display: inline-flex !important;
}

.ProseMirror .list-item.is-dragging .tag-button.has-tag {
  background-color: #e2e8f0;
  color: #475569;
  border-color: transparent;
}

/* Drop target indicator */
.ProseMirror .drop-target {
  position: relative;
}

.ProseMirror .drop-target::before {
  content: '';
  position: absolute;
  left: 0;
  right: 0;
  height: 2px;
  background-color: rgb(59, 130, 246);
  transform: scaleX(0.98);
  transition: transform 0.15s ease;
}

.ProseMirror .drop-target.drop-target-top::before {
  top: -1px;
}

.ProseMirror .drop-target.drop-target-bottom::before {
  bottom: -1px;
}

.ProseMirror .drop-target.drop-target-active::before {
  transform: scaleX(1);
}

.list-item {
  position: relative;
}

.list-item.drop-target::before {
  content: '';
  position: absolute;
  left: 0;
  right: 0;
  height: 2px;
  background-color: #3b82f6;
  z-index: 1000;
  pointer-events: none;
}

.list-item.drop-target.drop-target-top::before {
  top: 0;
}

.list-item.drop-target.drop-target-bottom::before {
  bottom: 0;
}

.list-item.drop-target.drop-target-active {
  opacity: 0.5;
}

.list-item.is-dragging {
  opacity: 0.5;
}

/* Adjust drag handle position for nested items */
.ProseMirror .list-item .list-item .drag-handle {
  left: 0.5rem;
  top: 0.5rem;
}

/* Sub-list item styles for indented items */
.ProseMirror ul li ul li,
.ProseMirror ol li ol li,
.ProseMirror ul li ol li,
.ProseMirror ol li ul li {
  position: relative;
  margin: 0.2rem 0;
  padding: 0.5rem;
  padding-left: 2.5rem;
  border-radius: 0.5rem;
  cursor: pointer;
  background-color: rgba(239, 194, 255, 0.15) !important;
  border: 2px solid transparent;
  transition: all 0.2s ease;
  min-height: 2.5rem;
  display: flex;
  flex-direction: row;
  flex-wrap: nowrap;
  align-items: center;
  gap: 0.5rem;
  width: 100%;
  margin-left: 0;
}

/* Sub-list item content wrapper */
.ProseMirror ul li ul li > div,
.ProseMirror ol li ol li > div,
.ProseMirror ul li ol li > div,
.ProseMirror ol li ul li > div {
  display: flex;
  flex-direction: row;
  align-items: center;
  gap: 0.5rem;
  flex: 1;
  min-width: 0;
}

/* Sub-list item content */
.ProseMirror ul li ul li > div > .list-item-content,
.ProseMirror ol li ol li > div > .list-item-content,
.ProseMirror ul li ol li > div > .list-item-content,
.ProseMirror ol li ul li > div > .list-item-content {
  flex: 1;
  min-width: 0;
  position: relative;
  z-index: 1;
  display: inline-flex;
  align-items: center;
}

/* Show tag button on sub-list items */
.ProseMirror ul li ul li .tag-button,
.ProseMirror ol li ol li .tag-button,
.ProseMirror ul li ol li .tag-button,
.ProseMirror ol li ul li .tag-button {
  display: inline-flex;
  position: relative;
  align-items: center;
  justify-content: center;
  flex: 0 0 auto;
  padding: 0.4rem;
  border-radius: 0.25rem;
  cursor: pointer;
  transition: all 0.2s ease;
  z-index: 10;
  pointer-events: auto !important;
  user-select: none;
  background-color: white;
  border: 1px dashed gray;
  color: #94a3b8;
  min-width: 32px;
  max-width: max-content;
  font-size: 0.875rem;
  white-space: nowrap;
  order: -1; /* Ensure tag comes before content */
}

/* Deeper nested levels */
.ProseMirror ul li ul li ul li,
.ProseMirror ol li ol li ol li,
.ProseMirror ul li ol li ul li,
.ProseMirror ol li ul li ol li {
  background-color: rgba(188, 2, 255, 0.15) !important;
}

/* Ensure sticky elements stay on top */
.sticky, 
.fixed,
[data-sticky="true"] {
  position: sticky !important;
  z-index: 10 !important;
}